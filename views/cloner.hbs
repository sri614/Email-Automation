<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />

<div
  class="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg border border-gray-200 transition-all duration-300 hover:shadow-xl">
  <div class="flex items-center justify-center mb-8">
    <div class="bg-indigo-600 p-3 rounded-lg mr-4 shadow-md">
      <i class="fas fa-clone text-white text-2xl"></i>
    </div>
    <h1 class="text-2xl md:text-3xl font-bold text-center text-indigo-700">
      Email Cloner
    </h1>
  </div>

  <form id="emailForm" class="space-y-6">
    <div class="space-y-3">
      <label for="emailIds" class="block font-semibold text-gray-800 text-lg flex items-center">
        <i class="fas fa-list-ol mr-2 text-indigo-500"></i>
        Email IDs to Clone
      </label>
      <div class="relative">
        <textarea id="emailIds" rows="4"
          class="w-full border-2 border-gray-300 p-4 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
          placeholder="Enter email IDs separated by commas" required></textarea>
        <div class="absolute bottom-3 right-3 bg-indigo-100 px-3 py-1 rounded-lg text-sm font-medium text-indigo-700">
          <i class="fas fa-envelope mr-1"></i>
          <span id="emailCount">0</span> emails
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <label for="cloningCount" class="block font-semibold text-gray-800 mb-2 flex items-center">
          <i class="fas fa-calendar-alt mr-2 text-indigo-500"></i>
          Number of Days
        </label>
        <input type="number" id="cloningCount" min="1" max="30" value="1"
          class="w-full border-2 border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"
          required />
      </div>
      <div>
        <label for="timeStrategy" class="block font-semibold text-gray-800 mb-2 flex items-center">
          <i class="fas fa-clock mr-2 text-indigo-500"></i>
          Scheduling Strategy
        </label>
        <select id="timeStrategy"
          class="w-full border-2 border-gray-300 p-3 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 cursor-pointer">
          <option value="smart">Smart Distribution (11AM & 4PM)</option>
          <option value="morning">Morning Only (11AM)</option>
          <option value="afternoon">Afternoon Only (4PM)</option>
          <option value="custom">Custom Times</option>
        </select>
      </div>
    </div>

    <div id="customTimeOptions" class="hidden space-y-4 p-4 bg-gray-50 rounded-lg">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="startHour" class="block text-sm font-medium text-gray-700">Start Hour</label>
          <input type="number" id="startHour" min="0" max="23" value="11" class="w-full p-2 border rounded">
        </div>
        <div>
          <label for="interval" class="block text-sm font-medium text-gray-700">Interval (minutes)</label>
          <input type="number" id="interval" min="5" max="60" value="5" class="w-full p-2 border rounded">
        </div>
      </div>
    </div>

    <div class="pt-4">
      <button type="submit" id="submitBtn"
        class="w-full bg-indigo-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-indigo-700 transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center">
        <i class="fas fa-rocket mr-2"></i>
        <span>Start Cloning Process</span>
      </button>
    </div>
  </form>

  <div class="mt-8 p-6 bg-gray-50 rounded-lg border border-gray-200">
    <div class="flex justify-between items-center mb-3">
      <h3 class="font-semibold text-gray-800 flex items-center">
        <i class="fas fa-chart-line mr-2 text-indigo-500"></i>
        Process Status
      </h3>
      <div id="statusText"
        class="px-3 py-1 bg-white rounded-lg text-sm font-semibold text-indigo-600 border border-gray-200">Ready</div>
    </div>
    <div class="bg-white rounded-lg h-3 border border-gray-200 overflow-hidden">
      <div id="progressBar" class="progress-bar bg-indigo-600 rounded-lg h-3 transition-all duration-300"
        style="width: 0%">
      </div>
    </div>
  </div>

  <div id="logArea"
    class="mt-6 text-sm bg-gray-50 p-4 rounded-lg border border-gray-200 overflow-y-auto max-h-80 font-mono space-y-2">
    <div class="text-center text-gray-500 py-6">
      <i class="fas fa-terminal text-2xl mb-2 text-gray-400"></i>
      <p>Logs will appear here when the process starts</p>
    </div>
  </div>

  <div id="stats" class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4 text-center hidden">
    <div
      class="bg-indigo-50 p-4 rounded-lg shadow-sm border border-indigo-100 hover:shadow-md transition-shadow duration-200">
      <div class="text-indigo-800 font-bold text-xl" id="totalAttempted">0</div>
      <div class="text-indigo-600 text-sm font-medium mt-1">Total Attempted</div>
    </div>
    <div
      class="bg-blue-50 p-4 rounded-lg shadow-sm border border-blue-100 hover:shadow-md transition-shadow duration-200">
      <div class="text-blue-800 font-bold text-xl" id="successCount">0</div>
      <div class="text-blue-600 text-sm font-medium mt-1">Successfully Cloned</div>
    </div>
    <div
      class="bg-yellow-50 p-4 rounded-lg shadow-sm border border-yellow-100 hover:shadow-md transition-shadow duration-200">
      <div class="text-yellow-800 font-bold text-xl" id="duplicatesSkipped">0</div>
      <div class="text-yellow-600 text-sm font-medium mt-1">Duplicates Skipped</div>
    </div>
    <div
      class="bg-red-50 p-4 rounded-lg shadow-sm border border-red-100 hover:shadow-md transition-shadow duration-200">
      <div class="text-red-800 font-bold text-xl" id="errorCount">0</div>
      <div class="text-red-600 text-sm font-medium mt-1">Errors</div>
    </div>
  </div>

  <!-- View Cloned Emails Section -->
  <div class="mt-8 border-t border-gray-200 pt-6">
    <div class="flex items-center justify-between mb-4">
      <h3 class="font-semibold text-lg text-gray-800 flex items-center">
        <i class="fas fa-history mr-2 text-indigo-500"></i>
        Cloned Emails History
      </h3>
      <button id="viewClonedBtn"
        class="bg-indigo-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-indigo-700 transition-colors duration-200 shadow-sm hover:shadow-md flex items-center">
        <i class="fas fa-database mr-2"></i>
        View Cloned Emails
      </button>
    </div>

    <div id="clonedEmailsList" class="hidden bg-white p-4 rounded-lg border border-gray-200 max-h-96 overflow-y-auto">
      <div class="text-center text-gray-500 py-6">
        <i class="fas fa-inbox text-3xl mb-2 text-gray-400"></i>
        <p class="font-medium">Click "View Cloned Emails" to load history</p>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  const form = document.getElementById('emailForm');
  const logArea = document.getElementById('logArea');
  const progressBar = document.getElementById('progressBar');
  const statusText = document.getElementById('statusText');
  const statsSection = document.getElementById('stats');
  const emailCount = document.getElementById('emailCount');
  const timeStrategy = document.getElementById('timeStrategy');
  const customTimeOptions = document.getElementById('customTimeOptions');
  const submitBtn = document.getElementById('submitBtn');
  const viewClonedBtn = document.getElementById('viewClonedBtn');
  const clonedEmailsList = document.getElementById('clonedEmailsList');

  let stats = {
    totalAttempted: 0,
    successCount: 0,
    duplicatesSkipped: 0,
    errorCount: 0
  };

  // Update email count
  document.getElementById('emailIds').addEventListener('input', function () {
    const emails = this.value.split(',').filter(id => id.trim() !== '');
    emailCount.textContent = emails.length;
  });

  // Show/hide custom time options
  timeStrategy.addEventListener('change', function () {
    customTimeOptions.classList.toggle('hidden', this.value !== 'custom');
  });

  function updateStats() {
    document.getElementById('totalAttempted').textContent = stats.totalAttempted;
    document.getElementById('successCount').textContent = stats.successCount;
    document.getElementById('duplicatesSkipped').textContent = stats.duplicatesSkipped;
    document.getElementById('errorCount').textContent = stats.errorCount;
  }

  function log(message, type = 'info') {
    const colors = {
      info: 'text-gray-800',
      success: 'text-green-600',
      error: 'text-red-600',
      warning: 'text-yellow-600'
    };

    const icons = {
      info: 'fa-info-circle',
      success: 'fa-check-circle',
      error: 'fa-times-circle',
      warning: 'fa-exclamation-circle'
    };

    if (logArea.firstChild?.textContent.includes("Logs will appear here")) {
      logArea.innerHTML = '';
    }

    const entry = document.createElement('div');
    entry.className = `log-entry flex items-start ${colors[type]}`;
    entry.innerHTML = `
      <i class="fas ${icons[type]} mt-1 mr-2"></i>
      <div>${message}</div>
    `;
    logArea.appendChild(entry);
    logArea.scrollTop = logArea.scrollHeight;
  }

  function updateProgress(percent) {
    progressBar.style.width = `${percent}%`;
    progressBar.classList.toggle('bg-indigo-600', percent < 100);
    progressBar.classList.toggle('bg-green-500', percent === 100);
  }

  // View cloned emails function
  async function viewClonedEmails() {
    try {
      clonedEmailsList.classList.remove('hidden');
      clonedEmailsList.innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin text-indigo-600 mr-2"></i>Loading cloned emails...</div>';

      // Updated API endpoint path
      const response = await axios.get('/api/cloned-emails');
      const emails = response.data.data;

      if (emails.length === 0) {
        clonedEmailsList.innerHTML = '<div class="text-center text-gray-400 py-4">No cloned emails found</div>';
        return;
      }

      let html = `
        <div class="mb-4 text-sm text-gray-500">
          <i class="fas fa-info-circle mr-1"></i>
          Showing ${emails.length} cloned emails
        </div>
      `;

      emails.forEach(email => {
        const date = new Date(email.scheduledTime).toLocaleString();
        html += `
          <div class="bg-white p-3 rounded-lg border border-gray-200 mb-2">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <div class="font-medium text-gray-800">${email.clonedEmailName}</div>
                <div class="text-sm text-gray-500 mt-1">
                  <span class="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded">ID: ${email.clonedEmailId}</span>
                  <span class="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded ml-2">Scheduled: ${date}</span>
                </div>
                <div class="text-xs text-gray-400 mt-1">
                  Original ID: ${email.originalEmailId} | Created: ${new Date(email.createdAt).toLocaleString()}
                </div>
              </div>
              <button 
                class="delete-btn ml-2 text-red-500 hover:text-red-700 p-1 rounded hover:bg-red-50" 
                data-id="${email._id}"
                title="Delete from database"
              >
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
      });

      clonedEmailsList.innerHTML = html;

      // Add event listeners to delete buttons
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async (e) => {
          e.preventDefault();
          const target = e.currentTarget || e.target;
          const emailId = target.getAttribute('data-id');

          if (!target || !emailId) {
            console.error('Delete error: Missing target element or email ID');
            log('✗ Error: Could not identify email to delete', 'error');
            return;
          }

          if (confirm('Are you sure you want to delete this cloned email record from the database?')) {
            try {
              // Updated API endpoint path
              const response = await axios.delete(`/api/cloned-emails/${emailId}`);
              const parentCard = target.closest('.bg-white');
              if (parentCard) {
                parentCard.remove();

                // Show appropriate success message based on HubSpot deletion status
                const data = response.data;
                if (data.hubspotDeleted) {
                  log('✓ Cloned email deleted successfully from both database and HubSpot', 'success');
                } else if (data.hubspotError) {
                  log(`✓ Cloned email deleted from database. HubSpot deletion failed: ${data.hubspotError}`, 'warning');
                } else {
                  log('✓ Cloned email deleted from database (no HubSpot ID found)', 'success');
                }

                // Update count
                const remainingEmails = document.querySelectorAll('.bg-white').length;
                if (remainingEmails === 0) {
                  clonedEmailsList.innerHTML = '<div class="text-center text-gray-400 py-4">No cloned emails found</div>';
                }
              }
            } catch (error) {
              console.error('Delete error:', error);
              log('✗ Error deleting cloned email record: ' + (error.response?.data?.message || error.message), 'error');
            }
          }
        });
      });

    } catch (error) {
      console.error('View cloned emails error:', error);
      clonedEmailsList.innerHTML = '<div class="text-center text-red-500 py-4">Error loading cloned emails: ' + (error.response?.data?.message || error.message) + '</div>';
      log('Error loading cloned emails: ' + (error.response?.data?.message || error.message), 'error');
    }
  }

  viewClonedBtn.addEventListener('click', viewClonedEmails);

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const emailIds = document.getElementById('emailIds').value.split(',').map(id => id.trim()).filter(id => id !== '');
    const cloningCount = parseInt(document.getElementById('cloningCount').value, 10);
    const strategy = timeStrategy.value;

    if (emailIds.length === 0) {
      log('Please enter at least one email ID', 'error');
      return;
    }

    // Reset UI
    logArea.innerHTML = '';
    statsSection.classList.remove('hidden');
    stats = {
      totalAttempted: emailIds.length * cloningCount,
      successCount: 0,
      duplicatesSkipped: 0,
      errorCount: 0
    };
    updateStats();
    updateProgress(0);
    statusText.textContent = 'Processing...';
    statusText.className = 'text-sm font-medium text-indigo-600';
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';

    try {
      log(`🚀 Starting to clone ${emailIds.length} emails for ${cloningCount} day(s)`, 'info');
      log(`⏳ Using scheduling strategy: ${strategy}`, 'info');

      // Updated API endpoint path
      const response = await axios.post('/api/clone-emails', {
        emailIds,
        cloningCount,
        strategy
      });

      if (response.data.success) {
        const result = response.data;
        log(`✅ ${result.message}`, 'success');
        log(`📊 ${result.stats.successfullyCloned} emails cloned, ${result.stats.duplicatesSkipped} duplicates skipped, ${result.stats.errors} errors`, 'info');

        // Log details about what was skipped vs what was actually cloned
        if (result.stats.duplicatesSkipped > 0) {
          log(`ℹ️ ${result.stats.duplicatesSkipped} emails were skipped because they already exist (either in HubSpot or database)`, 'warning');
        }
        if (result.stats.errors > 0) {
          log(`⚠️ ${result.stats.errors} emails failed to clone due to errors`, 'error');
        }

        // Update stats from backend response
        stats.successCount = result.stats.successfullyCloned;
        stats.duplicatesSkipped = result.stats.duplicatesSkipped;
        stats.errorCount = result.stats.errors;
        updateStats();

        statusText.textContent = 'Completed';
        statusText.className = 'text-sm font-medium text-green-600';
        updateProgress(100);

        // Show completion animation
        submitBtn.innerHTML = '<i class="fas fa-check-circle mr-2"></i> Process Complete!';
        submitBtn.className = submitBtn.className.replace('from-indigo-600 to-purple-600', 'from-green-500 to-green-600');

        setTimeout(() => {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<i class="fas fa-rocket mr-2"></i> Start Again';
          submitBtn.className = submitBtn.className.replace('from-green-500 to-green-600', 'from-indigo-600 to-purple-600');
        }, 3000);
      } else {
        throw new Error(response.data.message);
      }
    } catch (error) {
      console.error('Cloning error:', error);
      log("❌ Error occurred during cloning process", 'error');
      log(error.response?.data?.message || error.message, 'error');
      statusText.textContent = 'Failed';
      statusText.className = 'text-sm font-medium text-red-600';

      submitBtn.disabled = false;
      submitBtn.innerHTML = '<i class="fas fa-rocket mr-2"></i> Try Again';
    }
  });

  // Initialize
  updateStats();
</script>