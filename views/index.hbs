<div class="header__menu" style="position: relative;">
  

  <h1 style="text-align: center; margin: 20px 0 20px 0; font-size: 34px; font-weight: 500;">
    <i class="fas fa-list-ul" style="color: #067be1; margin-right: 15px;"></i>List Creator
  </h1>

  <div class="control-panel" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.08);">
    <div style="display: flex; align-items: center; gap: 12px;">
      <label for="globalDatePicker" style="font-weight: 600; color: #333; font-size: 15px;">Set Date for All Lists:</label>
      <input type="date" id="globalDatePicker" class="date-picker-input" style="padding: 12px 16px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 15px; background-color: white;">
    </div>

    <div style="display: flex; align-items: center; gap: 25px;">
      <div style="display: flex; align-items: center; gap: 12px;">
        <label for="daysFilter" style="font-weight: 600; color: #333; font-size: 15px;">Days:</label>
        <select id="daysFilter" class="filter-select" style="padding: 12px 16px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 15px; min-width: 140px; background-color: white;">
          <option value="all">All Days</option>
          <option value="today">Today</option>
          <option value="t+1">T+1 Days</option>
          <option value="t+2">T+2 Days</option>
          <option value="t+3">T+3 Days</option>
        </select>
      </div>

      <div style="display: flex; align-items: center; gap: 12px;">
        <label for="modeFilter" style="font-weight: 600; color: #333; font-size: 15px;white-space: nowrap;">List Mode:</label>
        <select id="modeFilter" class="filter-select" style="padding: 12px 16px; border: 2px solid #e0e0e0; border-radius: 8px; font-size: 15px; min-width: 170px; background-color: white;">
          <option value="BAU">BAU (Default)</option>
          <option value="re-engagement">Re-engagement</option>
          <option value="re-activation">Re-activation</option>
        </select>
      </div>

      <button id="openFormBtn" class="btn-primary" type="button" style="padding: 14px 32px; font-size: 16px; font-weight: 600; border-radius: 8px; background-color: #4A90E2; color: white; border: none; cursor: pointer; transition: all 0.3s;">Add Lists</button>
      <button id="runBtn" class="btn-primary" type="button" style="padding: 14px 32px; font-size: 16px; font-weight: 600; border-radius: 8px; background-color: #4A90E2; color: white; border: none; cursor: pointer; transition: all 0.3s;">Run Automation</button>
    </div>
  </div>
  <p id="save-status" class="disable" style="position: absolute; top: 180px; left: 0;">Note: drag & drop to change order...</p>
</div>

<h4 class="emailCount mb-12">{{emails.length}} Lists</h4>

{{#if hasEmails}}
<div class="flex" id="segmentation-list" style="margin-bottom: 50px;">
  {{#each emails}}
  <div class="card {{isType isMain this.domain}}" data-id="{{this._id}}" draggable="true">
    <div class="flex-bn flex-bn--alignTop mb-12">
      <div>
        <p class="brand" title="brand">{{this.brand}}</p>
        <p class="campaign" title="campaign: {{this.campaign}}">{{this.campaign}}</p>
      </div>
      <div class="text-right">
        <p class="domain" title="domain">{{this.domain}}</p>
        <p class="count" title="count">{{this.count}}</p>
      </div>
    </div>

    <p class="date mb-12"><span class="js-date" data-iso="{{this.date}}"></span></p>

    <div class="flex-box mb-12">
      <p class="box"><span>Primary</span><br>{{this.primaryListId}}</p>
      <p class="box"><span>Secondary</span><br>{{this.secondaryListId}}</p>
      <p class="box"><span>Send Contacts</span><br>{{this.sendContactListId}}</p>
    </div>

    <div class="flex-bn">
      <p class="edit-date" data-date="{{this.createdAt}}"></p>
      <div class="flex-bn btns">
        <button class="edit-btn" id="edit-btn" title="Edit" data-id="{{this._id}}" data-campaign="{{this.campaign}}"
          data-brand="{{this.brand}}" data-count="{{this.count}}" data-primary-list-id="{{this.primaryListId}}"
          data-secondary-list-id="{{this.secondaryListId}}" data-send-contact-list-id="{{this.sendContactListId}}"
          data-domain="{{this.domain}}" data-date="{{this.date}}"><img src="/assets/edit-svgrepo-com.svg" width="14"
            height="14"></button>

        <form action="/email/{{this._id}}?_method=DELETE" method="post">
          <button type="button" id="delete-btn" onclick="event.preventDefault(); showConfirm('Are you sure you want to delete this list?', (confirmed) => { if(confirmed) this.closest('form').submit(); }, 'Delete List')" title="Delete"><img
              src="/assets/delete-svgrepo-com.svg" width="14" height="14"></button>
        </form>
      </div>
    </div>
  </div>
  {{/each}}
</div>
{{else}}
<h3>No Emails</h3>
{{/if}}

<!-- Modal -->
<div id="emailModal" class="modal" aria-hidden="true" role="dialog" aria-labelledby="modalTitle">
  <div class="modal-content">
    <span id="closeModal" class="close" aria-label="Close">&times;</span>
    <form action="/add-email" method="POST" id="emailForm">
      <h2>Fill the email details</h2>
      <label for="campaign">Campaign:</label>
      <input type="text" id="campaign" name="campaign" required />

      <label for="brand">Brand:</label>
      <input type="text" id="brand" name="brand" required />

      <label for="count">Count:</label>
      <input type="number" id="count" name="count" required />

      <label for="primaryListId">Primary List ID:</label>
      <input type="number" id="primaryListId" name="primaryListId" required />

      <label for="secondaryListId">Secondary List ID:</label>
      <input type="number" id="secondaryListId" name="secondaryListId" />

      <label for="sendContactListId">Sent Contacts List ID:</label>
      <input type="number" id="sendContactListId" name="sendContactListId" required />

      <label for="domain">Domain:</label>
      <select id="domain" name="domain" required>
        <option value="" disabled selected>Select a domain</option>
        <option value="Main">Main</option>
        <option value="Sub">Sub</option>
        <option value="Tier 1 - Main">Tier 1 - Main</option>
        <option value="Tier 2 - Main">Tier 2 - Main</option>
        <option value="Tier 0c - Main">Tier 0c - Main</option>
        <option value="Tier 1 - Sub">Tier 1 - Sub</option>
        <option value="Tier 2 - Sub">Tier 2 - Sub</option>
        <option value="Tier 0c - Sub">Tier 0c - Sub</option>
      </select>

      <label for="date">Date:</label>
      <input type="date" id="date" name="date" required />

      <button id="form-btn" type="submit">Submit</button>
    </form>
  </div>
</div>

<div class="flex-bn mb-12" style="background-color: rgb(234, 234, 234);padding:8px 10px;border-radius:4px">
  <h2 style="margin-bottom: 0;">Created Lists (Today)</h2>
  <div style="display: flex;gap:20px;">
    <input class="searchInput" type="search" name="listSearch" id="listSearch" placeholder="search here">
    <button class="btn-primary" style="white-space:nowrap" id="reload-btn">View all</button>
  </div>
</div>
<h4 class="emailCount mb-12" id="list-count">{{lists.length}} Lists</h4>

{{#if hasLists}}
<div class="created-lists" style="height:400px;overflow-y:scroll;position:relative">
  <div class="list flex-bn sticky">
    <p class="heading"><strong>List id: </strong></p>
    <p class="heading"><strong>List Name: </strong></p>
    <p class="heading"><strong>Created date: </strong></p>
  </div>
  <ol id="list-container">
    {{#each lists}}
    <li style="margin-bottom: 20px;">
      <div class="list flex-bn">
        <p class="list-id">{{this.listId}}</p>
        <p class="list-name">{{this.name}} <a
            href="https://app.hubspot.com/contacts/5686032/objectLists/views/all?query={{this.name}}"
            target="_blank">View list</a></p>
        <p class="list-date"><span class="list-date-span" data-iso="{{this.createdDate}}"> {{this.createdDate}}</span>
        </p>
      </div>
    </li>
    {{/each}}
  </ol>
</div>
{{else}}
<h3>No Lists created Today</h3>
{{/if}}

<!-- Custom Dialog Box -->
<div id="customDialog" class="custom-dialog-overlay" style="display: none;">
  <div class="custom-dialog">
    <div class="custom-dialog-header">
      <h3 id="dialogTitle">Notification</h3>
      <button class="custom-dialog-close" onclick="closeDialog()">&times;</button>
    </div>
    <div class="custom-dialog-body">
      <div id="dialogIcon" class="dialog-icon"></div>
      <p id="dialogMessage">Message goes here</p>
    </div>
    <div class="custom-dialog-footer">
      <button id="dialogConfirmBtn" class="dialog-btn dialog-btn-primary" onclick="closeDialog()">OK</button>
      <button id="dialogCancelBtn" class="dialog-btn dialog-btn-secondary" onclick="closeDialog()" style="display: none;">Cancel</button>
    </div>
  </div>
</div>

<style>
/* Custom Dialog Styles */
.custom-dialog-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(5px);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.3s ease;
  cursor: not-allowed;
}

.custom-dialog-overlay.show {
  opacity: 1;
}

.custom-dialog {
  background: white;
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  width: 90%;
  max-width: 450px;
  transform: scale(0.9);
  transition: transform 0.3s ease;
  animation: dialogSlideIn 0.3s ease forwards;
  cursor: default;
}

@keyframes dialogSlideIn {
  from {
    transform: translateY(-30px) scale(0.95);
    opacity: 0;
  }
  to {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
}

.custom-dialog-header {
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.custom-dialog-header h3 {
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #1f2937;
}

.custom-dialog-close {
  background: none;
  border: none;
  font-size: 24px;
  color: #6b7280;
  cursor: pointer;
  padding: 0;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  transition: all 0.2s;
}

.custom-dialog-close:hover {
  background: #f3f4f6;
  color: #1f2937;
}

.custom-dialog-body {
  padding: 24px;
  text-align: center;
}

.dialog-icon {
  width: 48px;
  height: 48px;
  margin: 0 auto 16px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
}

.dialog-icon.success {
  background: #d1fae5;
  color: #065f46;
}

.dialog-icon.success::before {
  content: "✓";
}

.dialog-icon.error {
  background: #fee2e2;
  color: #991b1b;
}

.dialog-icon.error::before {
  content: "✕";
}

.dialog-icon.warning {
  background: #fed7aa;
  color: #9a3412;
}

.dialog-icon.warning::before {
  content: "!";
}

.dialog-icon.info {
  background: #dbeafe;
  color: #1e40af;
}

.dialog-icon.info::before {
  content: "i";
  font-weight: bold;
  font-style: italic;
}

#dialogMessage {
  font-size: 15px;
  color: #4b5563;
  line-height: 1.6;
  margin: 0;
}

.custom-dialog-footer {
  padding: 16px 24px;
  border-top: 1px solid #e5e7eb;
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}

.dialog-btn {
  padding: 8px 20px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  border: none;
  outline: none;
}

.dialog-btn-primary {
  background: #1654a0;
  color: white;
}

.dialog-btn-primary:hover {
  background: #1e5ba8;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(22, 84, 160, 0.3);
}

.dialog-btn-secondary {
  background: #e5e7eb;
  color: #374151;
}

.dialog-btn-secondary:hover {
  background: #d1d5db;
}

/* Confirm dialog specific styles */
.confirm-dialog .custom-dialog-body {
  text-align: left;
}

.confirm-dialog .dialog-icon {
  margin: 0 auto 16px;
}
</style>

<script>
  // Custom Dialog Functions
  let dialogCallback = null;

  function showDialog(message, type = 'info', title = null) {
    const dialog = document.getElementById('customDialog');
    const dialogTitle = document.getElementById('dialogTitle');
    const dialogMessage = document.getElementById('dialogMessage');
    const dialogIcon = document.getElementById('dialogIcon');
    const confirmBtn = document.getElementById('dialogConfirmBtn');
    const cancelBtn = document.getElementById('dialogCancelBtn');

    // Set title
    dialogTitle.textContent = title || (type === 'success' ? 'Success' : type === 'error' ? 'Error' : type === 'warning' ? 'Warning' : 'Information');

    // Set message
    dialogMessage.innerHTML = message.replace(/\n/g, '<br>');

    // Set icon type
    dialogIcon.className = 'dialog-icon ' + type;

    // Hide cancel button for notifications
    cancelBtn.style.display = 'none';
    confirmBtn.textContent = 'OK';

    // Show dialog
    dialog.style.display = 'flex';
    setTimeout(() => dialog.classList.add('show'), 10);
  }

  function showConfirm(message, callback, title = 'Confirm') {
    const dialog = document.getElementById('customDialog');
    const dialogTitle = document.getElementById('dialogTitle');
    const dialogMessage = document.getElementById('dialogMessage');
    const dialogIcon = document.getElementById('dialogIcon');
    const confirmBtn = document.getElementById('dialogConfirmBtn');
    const cancelBtn = document.getElementById('dialogCancelBtn');

    // Set title
    dialogTitle.textContent = title;

    // Set message
    dialogMessage.innerHTML = message.replace(/\n/g, '<br>');

    // Set icon type
    dialogIcon.className = 'dialog-icon warning';

    // Show both buttons
    cancelBtn.style.display = 'inline-block';
    confirmBtn.textContent = 'Confirm';

    // Set callback
    dialogCallback = callback;

    // Update confirm button onclick
    confirmBtn.onclick = function() {
      closeDialog();
      if (dialogCallback) {
        dialogCallback(true);
        dialogCallback = null;
      }
    };

    // Update cancel button onclick
    cancelBtn.onclick = function() {
      closeDialog();
      if (dialogCallback) {
        dialogCallback(false);
        dialogCallback = null;
      }
    };

    // Show dialog
    dialog.style.display = 'flex';
    setTimeout(() => dialog.classList.add('show'), 10);
  }

  function closeDialog() {
    const dialog = document.getElementById('customDialog');
    dialog.classList.remove('show');
    setTimeout(() => {
      dialog.style.display = 'none';
      dialogCallback = null;
    }, 300);
  }

  // Prevent closing dialog on overlay click - only allow closing via buttons
  document.addEventListener('DOMContentLoaded', function() {
    const dialog = document.getElementById('customDialog');
    // Remove the overlay click listener - dialog can only be closed via buttons
    dialog.addEventListener('click', function(e) {
      e.stopPropagation(); // Prevent any click propagation
    });
  });

  // 🔄 Reusable Drag-and-Drop SortableJS
  function initDragAndDrop() {
    const list = document.getElementById('segmentation-list');
    const status = document.getElementById('save-status');

    if (!list || !window.Sortable) return;

    new Sortable(list, {
      animation: 150,
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'drag-active',
      onEnd: async () => {
        const ids = [...list.querySelectorAll('.card')].map(el => el.dataset.id);
        try {
          const res = await fetch('/api/segmentations/reorder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderedIds: ids })
          });

          const result = await res.json();
          if (result.success) {
            status.textContent = "Order saved!";
            status.classList.add("save-status");
            status.classList.remove("disable");
            setTimeout(() => status.textContent = "", 1500);
          } else {
            status.textContent = "Failed to save order.";
          }
        } catch (err) {
          console.error("Reorder Error:", err);
          status.textContent = "Server error.";
        }
      }
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    initDragAndDrop(); // Initialize drag and drop

    // Global date picker functionality
    const globalDatePicker = document.getElementById('globalDatePicker');
    if (globalDatePicker) {
      globalDatePicker.addEventListener('change', async function() {
        const newDate = this.value;
        if (!newDate) return;

        // Get current filter values
        const modeFilter = document.getElementById('modeFilter');
        const selectedMode = modeFilter ? modeFilter.value.toLowerCase() : 'bau';

        // Get only visible cards (respecting current filters)
        const visibleCards = document.querySelectorAll('.card[style="display: block;"], .card:not([style])');

        if (visibleCards.length === 0) {
          showDialog('No lists are currently visible to update.', 'warning');
          this.value = '';
          return;
        }

        // Build confirmation message based on active filter
        let filterDescription = '';
        if (selectedMode === 're-engagement') {
          filterDescription = ' (Re-engagement lists only)';
        } else if (selectedMode === 're-activation') {
          filterDescription = ' (Re-activation lists only)';
        } else if (selectedMode === 'bau') {
          filterDescription = ' (BAU lists only)';
        }

        const datePickerElement = this;
        showConfirm(
          `Are you sure you want to update <strong>${visibleCards.length}</strong> visible list dates<strong>${filterDescription}</strong> to <strong>${newDate}</strong>?`,
          (confirmed) => {
            if (!confirmed) {
              datePickerElement.value = '';
              return;
            }
            // Continue with the update process
            updateListDates();
          },
          'Update List Dates'
        );

        async function updateListDates() {

        const updatePromises = [];
        let updatedCount = 0;

        visibleCards.forEach(card => {
          // Double-check the card matches the current mode filter
          const campaignElement = card.querySelector('.campaign');
          const cardCampaign = campaignElement ? campaignElement.textContent.toLowerCase() : '';

          let shouldUpdate = false;
          if (selectedMode === 'bau') {
            shouldUpdate = !cardCampaign.includes('re-engagement') && !cardCampaign.includes('re-activation');
          } else {
            shouldUpdate = cardCampaign.includes(selectedMode);
          }

          if (shouldUpdate) {
            const cardId = card.dataset.id;
            const dateElement = card.querySelector('.js-date');

            // Update visual display immediately
            if (dateElement) {
              dateElement.dataset.iso = newDate;
              const date = new Date(newDate);
              dateElement.textContent = date.toLocaleDateString("en-GB", {
                day: "numeric", month: "short", year: "numeric"
              });
            }

            // Prepare update request
            updatePromises.push(
              fetch(`/email/${cardId}/update-date`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ date: newDate })
              })
            );

            updatedCount++;
          }
        });

          // Send all update requests
          if (updatePromises.length > 0) {
            try {
              await Promise.all(updatePromises);
              showDialog(
                `Successfully updated <strong>${updatedCount}</strong> ${selectedMode.toUpperCase()} list dates to <strong>${newDate}</strong>`,
                'success',
                'Dates Updated Successfully'
              );

              // Re-apply filters after date update
              if (typeof applyFilters === 'function') {
                applyFilters();
              }
            } catch (error) {
              console.error('Error updating dates:', error);
              showDialog('Some dates could not be updated. Please refresh the page.', 'error', 'Update Failed');
            }
          } else {
            showDialog('No lists matched the current filter criteria.', 'info');
          }

          // Clear the date picker
          datePickerElement.value = '';
        }
      });
    }

    // Format dates
    document.querySelectorAll(".js-date").forEach(el => {
      const date = new Date(el.dataset.iso);
      el.textContent = date.toLocaleDateString("en-GB", {
        day: "numeric", month: "short", year: "numeric"
      });
    });

    document.querySelectorAll(".list-date-span").forEach(el => {
      const iso = el.getAttribute("data-iso");
      if (!iso) return;
      const d = new Date(iso);
      const day = d.getDate();
      const month = d.toLocaleString('en-US', { month: 'short' });
      const year = d.getFullYear();
      let hours = d.getHours();
      const minutes = d.getMinutes().toString().padStart(2, '0');
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12 || 12;
      el.textContent = `${day} ${month} ${year} ${hours}:${minutes}${ampm}`;
    });

    document.querySelectorAll(".edit-date").forEach(el => {
      const date = new Date(el.dataset.date);
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = String(date.getFullYear()).slice(-2);
      let hours = date.getHours();
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const ampm = hours >= 12 ? 'pm' : 'am';
      hours = hours % 12 || 12;
      el.textContent = `${day}.${month}.${year} ${hours}.${minutes} ${ampm}`;
    });

    document.querySelectorAll(".campaign").forEach(el => {
      el.textContent = `${el.textContent.slice(0, 18)}`;
    });

    // Modal edit form population
    const popupForm = document.getElementById("emailModal");
    const form = document.getElementById("emailForm");
    const formBtn = document.getElementById("form-btn");
    const campaignInput = document.getElementById("campaign");
    const brandInput = document.getElementById("brand");
    const countInput = document.getElementById("count");
    const primaryListIdInput = document.getElementById("primaryListId");
    const secondaryListIdInput = document.getElementById("secondaryListId");
    const sendContactListIdInput = document.getElementById("sendContactListId");
    const domainInput = document.getElementById("domain");
    const dateInput = document.getElementById("date");

    document.querySelectorAll(".edit-btn").forEach(button => {
      button.addEventListener("click", () => {
        form.action = `/email/${button.dataset.id}/edit?_method=PUT`;
        formBtn.textContent = "Update";
        campaignInput.value = button.dataset.campaign;
        brandInput.value = button.dataset.brand;
        countInput.value = button.dataset.count;
        primaryListIdInput.value = button.dataset.primaryListId;
        secondaryListIdInput.value = button.dataset.secondaryListId;
        sendContactListIdInput.value = button.dataset.sendContactListId;
        domainInput.value = button.dataset.domain;
        dateInput.value = button.dataset.date;
        popupForm.style.display = "block";
      });
    });

    // Filters
    const emailCards = document.querySelectorAll('.card');
    const daysFilter = document.getElementById('daysFilter');
    const modeFilter = document.getElementById('modeFilter');

    [daysFilter, modeFilter].forEach(filter => {
      filter.addEventListener('change', applyFilters);
    });

    function applyFilters() {
      const selectedDay = daysFilter.value;
      const selectedMode = modeFilter.value.toLowerCase();
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      emailCards.forEach(card => {
        const dateElement = card.querySelector('.js-date');
        const cardDate = new Date(dateElement.dataset.iso);
        cardDate.setHours(0, 0, 0, 0);
        const campaignElement = card.querySelector('.campaign');
        const cardCampaign = campaignElement.textContent.toLowerCase();

        // day match
        let dayMatch = true;
        if (selectedDay !== 'all') {
          const compareDate = new Date(today);
          if (selectedDay.startsWith('t+')) {
            compareDate.setDate(today.getDate() + parseInt(selectedDay.slice(2)));
          }
          dayMatch = cardDate.getTime() === compareDate.getTime();
        }

        // mode match
        let modeMatch = true;
        if (selectedMode !== 'bau') {
          modeMatch = cardCampaign.includes(selectedMode);
        } else {
          modeMatch = !cardCampaign.includes('re-engagement') && !cardCampaign.includes('re-activation');
        }

        card.style.display = (dayMatch && modeMatch) ? 'block' : 'none';
      });

      // update count
      const visibleCount = document.querySelectorAll('.card[style="display: block;"]').length;
      document.querySelector('h4.emailCount').textContent = `${visibleCount} Lists`;
    }

    applyFilters(); // apply on load

    // Run Automation Button
    document.getElementById('runBtn').addEventListener('click', async () => {
      const runBtn = document.getElementById('runBtn');
      const originalText = runBtn.textContent;

      try {
        runBtn.disabled = true;
        runBtn.textContent = 'Processing...';
        const daysFilter = document.getElementById('daysFilter').value;
        const modeFilter = document.getElementById('modeFilter').value;

        const response = await fetch('http://localhost:8000/api/create-lists', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ daysFilter, modeFilter })
        });

        const result = await response.json();

        if (!response.ok) {
          if (response.status === 404) {
            throw new Error(`No campaigns found for:<br>• Date: ${daysFilter.replace('t+', 'T+')}<br>• Mode: ${modeFilter}`);
          }
          throw new Error(result.error || 'Failed to create lists');
        }

        showDialog(
          `Successfully processed <strong>${result.count}</strong> campaigns matching:<br>• Date: <strong>${daysFilter.replace('t+', 'T+')}</strong><br>• Mode: <strong>${modeFilter}</strong>`,
          'success',
          'Automation Complete'
        );
      } catch (error) {
        showDialog(error.message, 'error', 'Automation Failed');
      } finally {
        runBtn.disabled = false;
        runBtn.textContent = originalText;
      }
    });

    // Search functionality
    let searchOn = false;
    let query = "";
    const searchInput = document.getElementById("listSearch");
    const reloadBtn = document.getElementById("reload-btn");

    searchInput.addEventListener("input", (e) => {
      query = e.target.value.trim().toLowerCase();
      searchOn = query.length > 0;
      reloadBtn.textContent = searchOn ? "Search" : "View all";
    });

    reloadBtn.addEventListener("click", async () => {
      try {
        const response = await fetch("/api/created-lists");
        let data = await response.json();
        const container = document.getElementById("list-container");
        container.innerHTML = "";

        if (searchOn) {
          const words = query.trim().split(/\s+/);
          data = data.filter(item => words.every(word => new RegExp(word, 'i').test(item.name)));
        }

        if (data.length === 0) {
          container.innerHTML = "<p>No matching lists found.</p>";
          document.getElementById("list-count").textContent = "0 Lists";
          return;
        }

        document.getElementById("list-count").textContent = `${data.length} Lists`;
        data.forEach(item => {
          const d = new Date(item.createdDate);
          const day = d.getDate();
          const month = d.toLocaleString('en-US', { month: 'short' });
          const year = d.getFullYear();
          let hours = d.getHours();
          const minutes = d.getMinutes().toString().padStart(2, '0');
          const ampm = hours >= 12 ? 'PM' : 'AM';
          hours = hours % 12 || 12;

          container.innerHTML += `
            <li style="margin-bottom: 20px;">
              <div class="list flex-bn">
                <p class="list-id">${item.listId}</p>
                <p class="list-name">${item.name} <a href="https://app.hubspot.com/contacts/5686032/objectLists/views/all?query=${item.name}" target="_blank">View list</a></p>
                <p class="list-date">${day} ${month} ${year} ${hours}:${minutes}${ampm}</p>
              </div>
            </li>`;
        });
      } catch (error) {
        console.error("Failed to reload lists:", error);
        document.getElementById("list-container").innerHTML = "<p>Error loading lists.</p>";
      }
    });
  });
</script>

<style>
  /* Enhanced interactions and micro-animations */
  .control-panel {
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .control-panel:hover {
    box-shadow: 0 4px 12px rgba(0,0,0,0.12) !important;
    transform: translateY(-1px);
  }

  .control-panel input[type="date"]:focus,
  .control-panel select:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(6, 123, 225, 0.1);
  }

  .card {
    position: relative;
    overflow: hidden;
  }

  .card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.5s;
  }

  .card:hover::before {
    left: 100%;
  }

  .card .btns button {
    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .card .btns button:hover {
    transform: scale(1.1);
  }

  .card .btns button:active {
    transform: scale(0.95);
  }

  /* Enhanced filter animations */
  .filter-dropdown select {
    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .filter-dropdown select:hover {
    border-color: #067be1;
    box-shadow: 0 2px 8px rgba(6, 123, 225, 0.15);
  }

  /* Smooth list animations */
  .created-lists {
    scroll-behavior: smooth;
  }

  .list.flex-bn {
    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .list.flex-bn:hover {
    background-color: rgba(6, 123, 225, 0.05);
    transform: translateX(5px);
  }

  /* Enhanced modal interactions */
  #emailModal {
    backdrop-filter: blur(8px);
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  #emailModal input:focus,
  #emailModal select:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(6, 123, 225, 0.1);
  }

  /* Floating action feedback */
  #save-status {
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    transform: translateZ(0);
  }

  #save-status.save-status {
    animation: statusPulse 0.6s ease-out;
  }

  @keyframes statusPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* Enhanced search interactions */
  .searchInput {
    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .searchInput:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(6, 123, 225, 0.1);
  }

  /* Smooth button loading states */
  .btn-primary.loading {
    animation: buttonPulse 1.5s infinite;
  }

  @keyframes buttonPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }

  /* Enhanced drag feedback */
  .card[draggable="true"] {
    cursor: grab;
    transition: all 0.2s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .card[draggable="true"]:active {
    cursor: grabbing;
  }

  /* Smooth dialog animations */
  .custom-dialog-overlay {
    transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  .custom-dialog {
    animation: dialogBounceIn 0.4s cubic-bezier(0.4, 0.0, 0.2, 1);
  }

  @keyframes dialogBounceIn {
    0% {
      opacity: 0;
      transform: scale(0.8) translateY(-50px);
    }
    80% {
      opacity: 1;
      transform: scale(1.05) translateY(0);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Mobile Responsive Styles for Index Page */
  @media (max-width: 768px) {
    .control-panel {
      flex-direction: column !important;
      gap: 20px;
      padding: 15px !important;
    }

    .control-panel > div {
      width: 100%;
      flex-direction: column !important;
      gap: 15px !important;
    }

    .control-panel label {
      display: block;
      margin-bottom: 5px;
      width: 100%;
    }

    .control-panel input[type="date"],
    .control-panel select {
      width: 100% !important;
      min-width: unset !important;
    }

    .control-panel button {
      width: 100% !important;
      margin-top: 5px;
    }

    #segmentation-list {
      flex-direction: column;
      gap: 15px !important;
    }

    .card {
      width: 100% !important;
      min-width: unset !important;
    }

    .flex-box {
      flex-direction: column !important;
      gap: 10px !important;
    }

    .box {
      width: 100% !important;
      padding: 10px !important;
      text-align: left !important;
    }

    /* Modal responsive */
    #emailModal .modal-content {
      width: 95% !important;
      max-width: none !important;
      margin: 10px !important;
      padding: 20px !important;
    }

    #emailModal input,
    #emailModal select {
      width: 100% !important;
      font-size: 16px !important;
    }

    /* List section responsive */
    .created-lists {
      height: 300px !important;
    }

    .list.flex-bn {
      flex-direction: column !important;
      align-items: flex-start !important;
      gap: 10px !important;
      padding: 10px !important;
    }

    .list p {
      width: 100% !important;
      font-size: 14px !important;
    }

    /* Search bar responsive */
    .searchInput {
      width: 100% !important;
      margin-bottom: 10px;
    }

    /* Filter dropdown responsive */
    .filter-dropdown {
      display: flex;
      flex-direction: column;
      width: 100%;
      gap: 5px;
    }

    .filter-dropdown label {
      width: 100%;
      margin-bottom: 5px;
    }

    .filter-dropdown select {
      width: 100% !important;
    }

    /* Save status position on mobile */
    #save-status {
      position: fixed !important;
      top: 70px !important;
      left: 10px !important;
      right: 10px !important;
      text-align: center;
      background: rgba(255, 255, 255, 0.9);
      padding: 5px;
      border-radius: 5px;
      z-index: 100;
    }

    /* Dialog responsive */
    .custom-dialog {
      width: 95% !important;
      max-width: none !important;
    }

    /* Cards drag indicator */
    .card[draggable="true"] {
      position: relative;
      padding-top: 25px !important;
    }

    .card[draggable="true"]::before {
      content: "⋮⋮";
      position: absolute;
      top: 5px;
      left: 50%;
      transform: translateX(-50%);
      color: #999;
      font-size: 12px;
    }
  }

  @media (max-width: 480px) {
    .header__menu h1 {
      font-size: 22px !important;
    }

    .header__menu h1 i {
      font-size: 20px !important;
      margin-right: 8px !important;
    }

    .control-panel {
      padding: 10px !important;
    }

    .card {
      padding: 10px !important;
    }

    .card p {
      font-size: 12px !important;
    }

    .card .brand {
      font-size: 14px !important;
    }

    .card .btns button {
      padding: 5px !important;
    }

    .emailCount {
      font-size: 14px !important;
      text-align: center !important;
    }

    /* Modal on small screens */
    #emailModal .modal-content {
      height: 100vh !important;
      width: 100% !important;
      margin: 0 !important;
      border-radius: 0 !important;
      overflow-y: auto;
    }

    #emailModal h2 {
      font-size: 18px !important;
    }

    /* List view on small screens */
    .list.sticky {
      position: relative !important;
    }

    .list-id,
    .list-name,
    .list-date {
      font-size: 12px !important;
    }
  }

  /* Touch-friendly adjustments */
  @media (hover: none) and (pointer: coarse) {
    .card {
      cursor: grab;
    }

    .card:active {
      cursor: grabbing;
    }

    button, .btn-primary {
      min-height: 44px;
      min-width: 44px;
    }

    input[type="date"],
    select {
      min-height: 44px;
    }
  }

  /* Landscape mode for mobile */
  @media (max-width: 768px) and (orientation: landscape) {
    .control-panel {
      flex-direction: row !important;
      flex-wrap: wrap;
    }

    .control-panel > div {
      width: 48%;
    }

    .created-lists {
      height: 250px !important;
    }
  }
</style>