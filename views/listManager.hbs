<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Email-List Association Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .email-card {
            border-left: 4px solid #4f46e5;
        }

        .list-card {
            border-left: 4px solid #10b981;
        }

        .match-highlight {
            background-color: #fffbeb;
            border: 1px solid #f59e0b;
        }

        .loading-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #4f46e5;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .created-lists {
            height: 400px;
            overflow-y: scroll;
        }

        .list.flex-bn {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
        }

        .list.flex-bn.sticky {
            position: sticky;
            top: 0;
            background: #f8f9fa;
            z-index: 10;
            font-weight: bold;
        }

        .list.flex-bn p {
            flex: 1;
            margin: 0 10px;
        }

        /* Notification styles */
        .notification {
            position: fixed;
            top: 1rem;
            right: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            color: white;
            font-weight: 500;
            z-index: 50;
            transition: all 0.3s ease;
        }

        .card-hover {
            transition: all 0.2s ease;
        }

        .card-hover:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>

<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="mb-8 text-center">
            <h1 class="font-bold text-indigo-500 mb-2" style="font-size: 28px;"><i class="fas fa-list-check" style="font-size: 28px;"></i>
                <span>List Manager</span>
            </h1>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Email Section -->
            <!-- Email Section -->
            <div class="bg-white rounded-lg shadow-md p-6 card-hover border border-gray-200">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-indigo-700 flex items-center">
                        <i class="fas fa-envelope mr-2 text-indigo-500"></i>
                        Emails
                    </h2>
                    <span class="bg-indigo-600 text-white text-sm font-medium px-3 py-1 rounded-lg" id="email-count">0
                        Emails</span>
                </div>

                <div class="mb-4">
                    <label for="email-filter" class="block text-sm font-medium text-gray-700 mb-2">Filter emails by
                        date:</label>
                    <select id="email-filter"
                        class="w-full border border-gray-300 rounded-lg p-2 focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="today">Today</option>
                        <option value="tomorrow">T+1 Days</option>
                        <option value="tplus2">T+2 Days</option>
                        <option value="tplus3">T+3 Days</option>
                        <option value="tplus4">T+4 Days</option>
                        <option value="all" selected>All Emails</option>
                    </select>
                </div>

                <div class="grid grid-cols-2 gap-4 max-h-96 overflow-y-auto pr-2" id="email-container">
                    <div class="text-center py-8 text-gray-400 col-span-2">
                        <div class="loading-spinner mb-3"></div>
                        <p>Loading emails...</p>
                    </div>
                </div>
            </div>

            <!-- Lists Section -->
            <div class="bg-white rounded-lg shadow-md p-6 card-hover border border-gray-200">
                <h4 class="emailCount mb-6 text-xl font-semibold text-green-700" id="list-count">{{lists.length}} Lists
                </h4>

                {{#if lists.length}}
                <div class="filter-controls" style="margin-bottom: 20px;">
                    <label for="date-filter" class="block text-sm font-medium text-gray-700 mb-2">Filter by date in list
                        names:</label>
                    <select id="date-filter"
                        class="w-full border border-gray-300 rounded-lg p-2 focus:ring-green-500 focus:border-green-500">
                        <option value="today">Today</option>
                        <option value="tomorrow">T+1 Days</option>
                        <option value="tplus2">T+2 Days</option>
                        <option value="tplus3">T+3 Days</option>
                        <option value="tplus4">T+4 Days</option>
                        <option value="all" selected>All Lists</option>
                    </select>
                </div>

                <div class="created-lists">
                    <div class="list flex-bn sticky">
                        <p class="heading"><strong>List ID</strong></p>
                        <p class="heading"><strong>List Name</strong></p>
                        <p class="heading"><strong>Created Date</strong></p>
                    </div>
                    <ol id="list-container">
                        {{#each lists}}
                        <li style="margin-bottom: 20px;">
                            <div class="list flex-bn">
                                <p class="list-id">{{this.listId}}</p>
                                <p class="list-name">{{this.name}} <a
                                        href="https://app.hubspot.com/contacts/5686032/objectLists/views/all?query={{this.name}}"
                                        target="_blank">View list</a></p>
                                <p class="list-date">{{this.formattedDate}}</p>
                            </div>
                        </li>
                        {{/each}}
                    </ol>
                </div>
                {{else}}
                <h3>No Lists Found</h3>
                {{/if}}
            </div>
        </div>

        <!-- Association Section -->
        <div class="bg-white rounded-lg shadow-md p-6 mt-8 card-hover border border-gray-200">
            <h2 class="text-xl font-semibold text-amber-700 mb-6">Email-List Associations</h2>

            <div class="mb-4 flex items-center space-x-4">
                <div class="flex-1">
                    <label for="association-filter" class="block text-sm font-medium text-gray-700 mb-2">Filter
                        associations by date:</label>
                    <select id="association-filter"
                        class="w-full border border-gray-300 rounded-lg p-2 focus:ring-amber-500 focus:border-amber-500">
                        <option value="today">Today</option>
                        <option value="tomorrow">T+1 Days</option>
                        <option value="tplus2">T+2 Days</option>
                        <option value="tplus3">T+3 Days</option>
                        <option value="tplus4">T+4 Days</option>
                        <option value="all" selected>All Associations</option>
                    </select>
                </div>
                <button id="create-associations"
                    class="bg-amber-600 hover:bg-amber-700 text-white font-semibold py-2 px-4 rounded-lg mt-5 transition-colors duration-200 shadow-sm hover:shadow-md"
                    style="
    background-color: #7c3aed;>
                    <i class=" fas fa-link mr-2"></i>Create Associations
                </button>
                <button id="include-lists"
                    class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg mt-5 transition-colors duration-200 shadow-sm hover:shadow-md">
                    <i class="fas fa-object-group mr-2"></i>Include Lists in Emails
                </button>
            </div>

            <div class="space-y-4 max-h-96 overflow-y-auto pr-2" id="association-container">
                <div class="text-center py-8 text-gray-400">
                    <i class="fas fa-unlink text-4xl mb-3"></i>
                    <p>No associations created yet</p>
                    <p class="text-sm mt-2">Click "Create Associations" to match emails with lists based on dates</p>
                </div>
            </div>
        </div>

        <!-- Email List Inclusion Statistics -->
        <div class="bg-white rounded-lg shadow-md p-6 mt-8 card-hover border border-gray-200">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-semibold text-purple-700 flex items-center">
                    <i class="fas fa-chart-bar mr-2 text-purple-500"></i>
                    Email List Inclusion Statistics
                </h2>
                <span class="bg-purple-600 text-white text-sm font-medium px-3 py-1 rounded-lg" id="inclusion-count">0 Emails</span>
            </div>

            <div class="mb-4">
                <label for="inclusion-filter" class="block text-sm font-medium text-gray-700 mb-2">Filter emails by date:</label>
                <select id="inclusion-filter"
                    class="w-full border border-gray-300 rounded-lg p-2 focus:ring-purple-500 focus:border-purple-500">
                    <option value="today">Today</option>
                    <option value="tomorrow">T+1 Days</option>
                    <option value="tplus2">T+2 Days</option>
                    <option value="tplus3">T+3 Days</option>
                    <option value="tplus4">T+4 Days</option>
                    <option value="all" selected>All Emails</option>
                </select>
            </div>

            <div class="max-h-96 overflow-y-auto pr-2" id="inclusion-container">
                <div class="text-center py-8 text-gray-400">
                    <i class="fas fa-list-ul text-4xl mb-3"></i>
                    <p>No email data available yet</p>
                    <p class="text-sm mt-2">Create associations first to see inclusion statistics</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Real data arrays - will be populated from API
        let emails = [];
        let lists = [];
        let associations = [];

        // Update and render inclusion statistics
        function updateInclusionStatistics() {
            const currentFilter = document.getElementById('inclusion-filter').value;
            filterInclusionStatistics(currentFilter);
        }

        // Filter inclusion statistics based on date
        function filterInclusionStatistics(filterType) {
            console.log(`Filtering inclusion statistics for: ${filterType}`);

            // First filter associations based on the association filter
            const associationFilter = document.getElementById('association-filter').value;
            const filteredAssociations = associations.filter(assoc => {
                return dateMatchesFilter(assoc.date, associationFilter);
            });

            // Calculate inclusion statistics from filtered associations
            const inclusionStats = calculateInclusionStatistics(filteredAssociations);

            // Further filter the statistics based on the inclusion filter if different
            const filteredStats = inclusionStats.filter(stat => {
                return dateMatchesFilter(stat.date, filterType);
            });

            console.log(`Filtered inclusion stats count: ${filteredStats.length}`);
            renderInclusionStatistics(filteredStats);

            // Update the count badge
            const countElement = document.getElementById('inclusion-count');
            if (countElement) {
                countElement.textContent = `${filteredStats.length} Emails`;
            }
        }

        // Calculate inclusion statistics from associations data
        function calculateInclusionStatistics(associationsToUse = null) {
            const assocs = associationsToUse || associations;

            if (assocs.length === 0) {
                return [];
            }

            // Group associations by email
            const emailGroups = {};

            assocs.forEach(assoc => {
                if (!emailGroups[assoc.emailId]) {
                    emailGroups[assoc.emailId] = {
                        emailId: assoc.emailId,
                        emailName: assoc.emailName,
                        date: assoc.date,
                        lists: []
                    };
                }

                emailGroups[assoc.emailId].lists.push({
                    listId: assoc.listId,
                    listName: assoc.listName
                });
            });

            // Convert to array format
            return Object.values(emailGroups);
        }

        // Render inclusion statistics in the UI
        function renderInclusionStatistics(statsToRender) {
            const container = document.getElementById('inclusion-container');

            if (statsToRender.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-400">
                        <i class="fas fa-list-ul text-4xl mb-3"></i>
                        <p>No email data available yet</p>
                        <p class="text-sm mt-2">Create associations first to see inclusion statistics</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = `
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
                    ${statsToRender.map(stat => `
                        <div class="card bg-white border border-purple-200 rounded-lg p-4 w-full" data-date="${stat.date}">
                            <div class="flex justify-between items-center mb-4">
                                <span class="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">${stat.date ? formatDate(stat.date) : 'No Date'}</span>
                                <span class="bg-purple-600 text-white text-xs font-medium px-2 py-1 rounded-full">
                                    ${stat.lists.length} List${stat.lists.length !== 1 ? 's' : ''}
                                </span>
                            </div>
                            <div class="space-y-3">
                                <div class="email-card bg-indigo-50 rounded-lg p-3">
                                    <h4 class="font-medium text-indigo-700 mb-1">Email</h4>
                                    <p class="text-sm">${stat.emailName}</p>
                                    <p class="text-xs text-indigo-500">ID: ${stat.emailId}</p>
                                </div>
                                <div class="lists-card bg-green-50 rounded-lg p-3 max-h-48 overflow-y-auto">
                                    <h4 class="font-medium text-green-700 mb-2">Included Lists (${stat.lists.length})</h4>
                                    <div class="space-y-2">
                                        ${stat.lists.map(list => `
                                            <div class="bg-white border border-green-100 rounded-md p-2">
                                                <p class="text-xs font-medium text-gray-800">${list.listName}</p>
                                                <div class="flex justify-between items-center mt-1">
                                                    <p class="text-xs text-green-500">ID: ${list.listId}</p>
                                                    <a href="https://app.hubspot.com/contacts/5686032/objectLists/views/all?query=${encodeURIComponent(list.listName)}"
                                                       target="_blank" class="text-blue-500 hover:text-blue-700 text-xs">
                                                        <i class="fas fa-external-link-alt mr-1"></i>View list
                                                    </a>
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        }

        document.addEventListener('DOMContentLoaded', async () => {
            // Load data from APIs
            await loadEmails();
            await loadListsFromPage();

            // Initialize the UI with data
            renderEmails(emails);
            updateCounts();
            updateInclusionStatistics();

            // Set up event listeners for filters
            document.getElementById('email-filter').addEventListener('change', function () {
                filterItems('email', this.value);
            });

            document.getElementById('date-filter').addEventListener('change', function () {
                filterLists(this.value);
            });

            document.getElementById('association-filter').addEventListener('change', function () {
                filterAssociations(this.value);
                // Sync with inclusion statistics
                const inclusionFilter = document.getElementById('inclusion-filter');
                inclusionFilter.value = this.value;
                filterInclusionStatistics(this.value);
            });

            document.getElementById('inclusion-filter').addEventListener('change', function () {
                // Sync with association filter
                const associationFilter = document.getElementById('association-filter');
                associationFilter.value = this.value;
                filterAssociations(this.value);
                filterInclusionStatistics(this.value);
            });

            // Set up event listener for creating associations
            document.getElementById('create-associations').addEventListener('click', createAssociations);

            // Set up event listener for including lists in emails
            document.getElementById('include-lists').addEventListener('click', includeListsInEmails);
        });

        // Function to load emails from your API
        async function loadEmails() {
            try {
                showNotification('Loading emails from database...', 'info');

                // Replace with your actual API endpoint for cloned emails
                const response = await fetch('/api/cloned-emails');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    // Transform the data to match our expected format
                    emails = data.data.map(email => ({
                        id: email.clonedEmailId,
                        name: email.clonedEmailName,
                        date: extractDateFromEmailName(email.clonedEmailName),
                        scheduledTime: email.scheduledTime
                    }));

                    showNotification(`Loaded ${emails.length} emails`, 'success');
                } else {
                    throw new Error(data.message || 'Failed to load emails');
                }
            } catch (error) {
                console.error('Error loading emails:', error);
                showNotification(`Error loading emails: ${error.message}`, 'error');



                emails = sampleEmails;
                showNotification(`Using sample email data for demonstration`, 'info');
            }
        }

        // Function to load lists from your existing page structure
        async function loadListsFromPage() {
            try {
                showNotification('Loading lists from page...', 'info');

                // Extract lists from your existing HTML structure
                const listElements = document.querySelectorAll('#list-container li');

                if (listElements.length > 0) {
                    lists = Array.from(listElements).map(listElement => {
                        const listId = listElement.querySelector('.list-id').textContent.trim();
                        const listNameElement = listElement.querySelector('.list-name');
                        const listName = listNameElement.childNodes[0].textContent.trim();
                        const formattedDate = listElement.querySelector('.list-date').textContent.trim();

                        return {
                            id: listId,
                            name: listName,
                            date: extractDateFromListName(listName),
                            formattedDate: formattedDate
                        };
                    });

                    showNotification(`Loaded ${lists.length} lists from page`, 'success');
                } else {
                    throw new Error('No lists found in page structure');
                }
            } catch (error) {
                console.error('Error loading lists from page:', error);
                showNotification(`Error loading lists: ${error.message}`, 'error');



                lists = sampleLists;
                showNotification(`Using sample list data for demonstration`, 'info');
            }
        }

        // Function to extract date from email name
        function extractDateFromEmailName(name) {
            if (!name) return null;

            // Try to extract date from the email name
            const dateFormats = [
                // Match "11 Sep 2025" or "1 Sep 2025"
                {
                    regex: /(\d{1,2})\s+([A-Za-z]{3})\s+(\d{4})/, handler: (match) => {
                        const months = {
                            'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
                            'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11
                        };
                        const monthNum = months[match[2]];
                        if (monthNum !== undefined) {
                            // Create date at noon local time to avoid timezone issues
                            const year = parseInt(match[3]);
                            const month = monthNum;
                            const day = parseInt(match[1]);
                            const date = new Date(year, month, day, 12, 0, 0);
                            return date;
                        }
                        return null;
                    }
                },
                // Match "Sep 11 2025" or "Sep 1 2025"
                {
                    regex: /([A-Za-z]{3})\s+(\d{1,2})\s+(\d{4})/, handler: (match) => {
                        const months = {
                            'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
                            'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11
                        };
                        const monthNum = months[match[1]];
                        if (monthNum !== undefined) {
                            // Create date at noon local time to avoid timezone issues
                            const year = parseInt(match[3]);
                            const month = monthNum;
                            const day = parseInt(match[2]);
                            const date = new Date(year, month, day, 12, 0, 0);
                            return date;
                        }
                        return null;
                    }
                },
                // Match "11/09/2025" or "9/11/2025"
                {
                    regex: /(\d{1,2})\/(\d{1,2})\/(\d{4})/, handler: (match) => {
                        const year = parseInt(match[3]);
                        const month = parseInt(match[2]) - 1;
                        const day = parseInt(match[1]);
                        return new Date(year, month, day, 12, 0, 0);
                    }
                },
                // Match "2025-09-11"
                {
                    regex: /(\d{4})-(\d{1,2})-(\d{1,2})/, handler: (match) => {
                        const year = parseInt(match[1]);
                        const month = parseInt(match[2]) - 1;
                        const day = parseInt(match[3]);
                        return new Date(year, month, day, 12, 0, 0);
                    }
                }
            ];

            for (const format of dateFormats) {
                const match = name.match(format.regex);
                if (match) {
                    const date = format.handler(match);
                    if (date && !isNaN(date.getTime())) {
                        // Return as YYYY-MM-DD in local timezone
                        const year = date.getFullYear();
                        const month = String(date.getMonth() + 1).padStart(2, '0');
                        const day = String(date.getDate()).padStart(2, '0');
                        return `${year}-${month}-${day}`;
                    }
                }
            }

            return null;
        }

        // Function to extract date from list name
        function extractDateFromListName(listName) {
            if (!listName) return null;

            const dateFormats = [
                // Match "11 Sep 2025" or "1 Sep 2025" 
                {
                    regex: /(\d{1,2})\s+([A-Za-z]{3})\s+(\d{4})/, handler: (match) => {
                        const months = {
                            'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
                            'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11
                        };
                        const monthNum = months[match[2]];
                        if (monthNum !== undefined) {
                            // Create date at noon local time to avoid timezone issues
                            const year = parseInt(match[3]);
                            const month = monthNum;
                            const day = parseInt(match[1]);
                            const date = new Date(year, month, day, 12, 0, 0);
                            return date;
                        }
                        return null;
                    }
                },
                // Match "Sep 11 2025" or "Sep 1 2025"
                {
                    regex: /([A-Za-z]{3})\s+(\d{1,2})\s+(\d{4})/, handler: (match) => {
                        const months = {
                            'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
                            'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11
                        };
                        const monthNum = months[match[1]];
                        if (monthNum !== undefined) {
                            // Create date at noon local time to avoid timezone issues
                            const year = parseInt(match[3]);
                            const month = monthNum;
                            const day = parseInt(match[2]);
                            const date = new Date(year, month, day, 12, 0, 0);
                            return date;
                        }
                        return null;
                    }
                },
                // Match "11/09/2025" or "9/11/2025"
                {
                    regex: /(\d{1,2})\/(\d{1,2})\/(\d{4})/, handler: (match) => {
                        const year = parseInt(match[3]);
                        const month = parseInt(match[2]) - 1;
                        const day = parseInt(match[1]);
                        return new Date(year, month, day, 12, 0, 0);
                    }
                },
                // Match "2025-09-11"
                {
                    regex: /(\d{4})-(\d{1,2})-(\d{1,2})/, handler: (match) => {
                        const year = parseInt(match[1]);
                        const month = parseInt(match[2]) - 1;
                        const day = parseInt(match[3]);
                        return new Date(year, month, day, 12, 0, 0);
                    }
                }
            ];

            for (const format of dateFormats) {
                const match = listName.match(format.regex);
                if (match) {
                    const date = format.handler(match);
                    if (date && !isNaN(date.getTime())) {
                        // Return as YYYY-MM-DD in local timezone
                        const year = date.getFullYear();
                        const month = String(date.getMonth() + 1).padStart(2, '0');
                        const day = String(date.getDate()).padStart(2, '0');
                        return `${year}-${month}-${day}`;
                    }
                }
            }

            return null;
        }


        // Function to normalize names by removing ONLY tier information, preserving Main/Sub in brand names
        function normalizeName(name) {
            if (!name) return '';

            // Remove ONLY tier-related information, NOT Main/Sub when they're part of brand names
            let normalized = name
                // Remove tier patterns that are clearly tier information
                .replace(/\s+-\s+Tier\s*\d+[A-Z]?\s*/gi, '')  // Remove " - Tier 1", " - Tier 2", " - Tier 0A", etc.
                .replace(/\s+-\s+Tier\s*[A-Z]+\s*/gi, '') // Remove " - Tier A", " - Tier B", etc.
                .replace(/\s+-\s+T\d+[A-Z]?\s*/gi, '')  // Remove " - T0", " - T1", " - T2", etc.
                // Only remove Main/Secondary/Primary when they appear as tier suffixes (after a hyphen at the end)
                .replace(/\s+-\s+Main\s*$/gi, '')  // Remove " - Main" only at the end
                .replace(/\s+-\s+Secondary\s*$/gi, '')  // Remove " - Secondary" only at the end
                .replace(/\s+-\s+Primary\s*$/gi, '')  // Remove " - Primary" only at the end
                .trim();

            // Remove extra spaces, multiple hyphens, and clean up
            normalized = normalized
                .replace(/\s+/g, ' ')        // Replace multiple spaces with single space
                .replace(/\s*-\s*-\s*/g, ' - ') // Clean up multiple hyphens to single hyphen
                .replace(/\s+/g, ' ')        // Final cleanup of spaces
                .trim();

            return normalized;
        }

        // Function to check if email and list names match (ignoring tier information)
        function namesMatch(emailName, listName) {
            const normalizedEmail = normalizeName(emailName).toLowerCase();
            const normalizedList = normalizeName(listName).toLowerCase();

            // First check if they're exactly the same after normalization
            if (normalizedEmail === normalizedList) {
                return true;
            }

            // Extract brand and campaign from normalized names
            // Format: Brand - Campaign - Date/Details
            const emailParts = normalizedEmail.split('-').map(p => p.trim()).filter(p => p.length > 0);
            const listParts = normalizedList.split('-').map(p => p.trim()).filter(p => p.length > 0);

            // Require at least brand + campaign for both
            if (emailParts.length >= 2 && listParts.length >= 2) {
                const emailBrand = emailParts[0];
                const emailCampaign = emailParts[1];
                const listBrand = listParts[0];
                const listCampaign = listParts[1];

                // Match if brand and campaign are exactly the same
                if (emailBrand === listBrand && emailCampaign === listCampaign) {
                    return true;
                }
            }

            return false;
        }


        // Function to check if a date matches the filter criteria
        function dateMatchesFilter(date, filterType) {
            if (filterType === 'all') return true;
            if (!date) return false;

            // Parse the date string properly
            const [year, month, day] = date.split('-').map(n => parseInt(n));

            // Create dates at noon to avoid any timezone issues
            const itemDate = new Date(year, month - 1, day, 12, 0, 0);

            const now = new Date();
            // Create today's date at noon
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);

            // Calculate days difference more accurately
            const msPerDay = 24 * 60 * 60 * 1000;
            const itemDateNormalized = new Date(itemDate.getFullYear(), itemDate.getMonth(), itemDate.getDate());
            const todayNormalized = new Date(today.getFullYear(), today.getMonth(), today.getDate());

            const diffDays = Math.round((itemDateNormalized - todayNormalized) / msPerDay);

            // Create string representations for exact comparison
            const itemDateStr = `${itemDate.getFullYear()}-${String(itemDate.getMonth() + 1).padStart(2, '0')}-${String(itemDate.getDate()).padStart(2, '0')}`;
            const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;

            console.log(`Filter: ${filterType} | Item Date: ${itemDateStr} | Today: ${todayStr} | Days Diff: ${diffDays}`);

            switch (filterType) {
                case 'today':
                    // Use string comparison for exact date match
                    return itemDateStr === todayStr;
                case 'tomorrow':
                    return diffDays === 1;
                case 'tplus2':
                    return diffDays === 2;
                case 'tplus3':
                    return diffDays === 3;
                case 'tplus4':
                    return diffDays === 4;
                default:
                    return false;
            }
        }

        // Helper function to compare dates - using your existing logic
        function isSameDate(date1, date2) {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }

        // Format date for display
        function formatDate(date) {
            if (!date) return 'No date';

            return new Date(date).toLocaleDateString('en-US', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        // Render emails in the UI
        function renderEmails(emailsToRender) {
            const container = document.getElementById('email-container');

            if (emailsToRender.length === 0) {
                container.innerHTML = `
            <div class="text-center py-8 text-gray-400 col-span-2">
                <i class="fas fa-envelope-open-text text-4xl mb-3"></i>
                <p>No emails found</p>
            </div>
        `;
                return;
            }

            // Check which emails have associations
            const emailsWithAssociations = new Set();
            associations.forEach(assoc => {
                emailsWithAssociations.add(assoc.emailId);
            });

            container.innerHTML = emailsToRender.map(email => {
                const hasAssociation = emailsWithAssociations.has(email.id);
                const borderColor = hasAssociation ? 'border-green-400' : 'border-gray-200';
                const bgColor = hasAssociation ? 'bg-green-50' : 'bg-white';

                return `
        <div class="email-card card ${bgColor} border ${borderColor} rounded-lg p-4 w-full relative" data-id="${email.id}" data-date="${email.date}">
            ${hasAssociation ? '<div class="absolute top-2 right-2"><i class="fas fa-link text-green-500 text-xs"></i></div>' : ''}
            <div class="flex justify-between items-start mb-2">
                <h3 class="font-medium text-gray-800 text-sm">${email.name}</h3>
                <div class="flex items-center space-x-2">
                    ${email.date ? `<span class="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full">${formatDate(email.date)}</span>` : '<span class="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded-full">No date</span>'}
                </div>
            </div>
            <div class="text-sm text-gray-500">
                <p class="text-xs">ID: ${email.id}</p>
                ${email.scheduledTime ? `<p class="mt-1 text-xs">Scheduled: ${new Date(email.scheduledTime).toLocaleString()}</p>` : ''}
                ${hasAssociation ? '<p class="mt-1 text-xs text-green-600"><i class="fas fa-check-circle mr-1"></i>Associated</p>' : ''}
            </div>
        </div>
    `}).join('');

            // Add event listeners to delete buttons
            addEmailDeleteListeners();
        }

        // Add event listeners to delete buttons
        function addEmailDeleteListeners() {
            document.querySelectorAll('.delete-email').forEach(btn => {
                btn.addEventListener('click', function () {
                    const emailId = this.getAttribute('data-id');
                    deleteEmail(emailId);
                });
            });
        }

        // Function to delete a cloned email
        async function deleteEmail(emailId) {
            if (!confirm('Are you sure you want to delete this email? This action cannot be undone.')) {
                return;
            }

            try {
                showNotification('Deleting email...', 'info');

                // Replace with your actual API endpoint and token
                const response = await fetch(`/api/cloned-emails/${emailId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    // Remove the email from the local array
                    emails = emails.filter(email => email.id !== emailId);

                    // Re-render emails
                    renderEmails(emails);
                    updateCounts();

                    showNotification('Email deleted successfully', 'success');
                } else {
                    throw new Error(result.message || 'Failed to delete email');
                }
            } catch (error) {
                console.error('Error deleting email:', error);
                showNotification(`Error deleting email: ${error.message}`, 'error');
            }
        }

        // Filter function for T+0 to T+4 and All Lists - Your original function
        // Fixed filter function for T+0 to T+4 and All Lists
        function filterLists(filterType) {
            const listItems = document.querySelectorAll('#list-container li');
            const now = new Date();
            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            let visibleCount = 0;

            listItems.forEach(item => {
                const listNameElement = item.querySelector('.list-name');
                const listName = listNameElement.childNodes[0].textContent.trim(); // Get the list name text only
                const itemDate = extractDateFromListName(listName);
                let showItem = false;

                if (filterType === 'all') {
                    showItem = true;
                } else if (itemDate) {
                    // Parse the extracted date string (YYYY-MM-DD format)
                    const [year, month, day] = itemDate.split('-').map(n => parseInt(n));
                    const itemDateObj = new Date(year, month - 1, day, 12, 0, 0);

                    // Create today's date at noon for accurate comparison
                    const todayNormalized = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);

                    // Calculate days difference
                    const msPerDay = 24 * 60 * 60 * 1000;
                    const diffDays = Math.round((itemDateObj - todayNormalized) / msPerDay);

                    switch (filterType) {
                        case 'today':
                            showItem = diffDays === 0;
                            break;
                        case 'tomorrow':
                            showItem = diffDays === 1;
                            break;
                        case 'tplus2':
                            showItem = diffDays === 2;
                            break;
                        case 'tplus3':
                            showItem = diffDays === 3;
                            break;
                        case 'tplus4':
                            showItem = diffDays === 4;
                            break;
                        default:
                            showItem = false;
                    }
                }

                item.style.display = showItem ? 'block' : 'none';
                if (showItem) visibleCount++;
            });

            updateListCount(visibleCount);
        }

        // Update the list count display
        function updateListCount(count) {
            const countElement = document.getElementById('list-count');
            if (countElement) {
                countElement.textContent = `${count} Lists`;
            }
        }
        // Render associations in the UI
        function renderAssociations(associationsToRender) {
            const container = document.getElementById('association-container');

            if (associationsToRender.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8 text-gray-400">
                        <i class="fas fa-unlink text-4xl mb-3"></i>
                        <p>No associations created yet</p>
                        <p class="text-sm mt-2">Click "Create Associations" to match emails with lists based on dates</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = `
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-4" id="association-container">
                    ${associationsToRender.map(assoc => `
                        <div class="match-highlight card bg-white border border-amber-200 rounded-lg p-4 w-full" data-date="${assoc.date}">
                            <div class="flex justify-between items-center mb-4">
                                <span class="bg-amber-100 text-amber-800 text-xs px-2 py-1 rounded-full">${formatDate(assoc.date)}</span>
                                <button class="text-red-500 hover:text-red-700 delete-association" data-id="${assoc.id}">
                                    <i class="fas fa-unlink"></i>
                                </button>
                            </div>

                            <div class="space-y-3">
                                <div class="email-card bg-indigo-50 rounded-lg p-3">
                                    <h4 class="font-medium text-indigo-700 mb-1">Email</h4>
                                    <p class="text-sm">${assoc.emailName}</p>
                                    <p class="text-xs text-indigo-500">ID: ${assoc.emailId}</p>
                                </div>

                                <div class="list-card bg-green-50 rounded-lg p-3">
                                    <h4 class="font-medium text-green-700 mb-1">List</h4>
                                    <p class="text-sm">${assoc.listName}</p>
                                    <p class="text-xs text-green-500">ID: ${assoc.listId}</p>
                                    <a href="https://app.hubspot.com/contacts/5686032/objectLists/views/all?query=${encodeURIComponent(assoc.listName)}"
                                       target="_blank" class="text-blue-500 hover:text-blue-700 text-xs mt-1 block">
                                        <i class="fas fa-external-link-alt mr-1"></i>View list
                                    </a>
                                </div>

                                <div class="status-message" id="status-${assoc.id}" style="display: none;">
                                    <!-- Status messages will be displayed here -->
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;

            // Add event listeners to delete buttons
            document.querySelectorAll('.delete-association').forEach(btn => {
                btn.addEventListener('click', function () {
                    const associationId = this.getAttribute('data-id');
                    deleteAssociation(associationId);
                });
            });
        }

        // Filter items based on date
        function filterItems(type, filterType) {
            const items = type === 'email' ? emails : lists;
            const container = document.getElementById(`${type}-container`);
            const countElement = document.getElementById(`${type}-count`);

            const filteredItems = items.filter(item => {
                return dateMatchesFilter(item.date, filterType);
            });

            if (type === 'email') {
                // Re-render emails to show updated association status
                renderEmails(filteredItems);
            }

            if (countElement) {
                countElement.textContent = `${filteredItems.length} ${type === 'email' ? 'Emails' : 'Lists'}`;
            }
        }

        // Filter associations based on date
        function filterAssociations(filterType) {
            console.log(`Filtering associations for: ${filterType}`);
            console.log(`Total associations before filter: ${associations.length}`);

            const filteredAssociations = associations.filter(assoc => {
                const matches = dateMatchesFilter(assoc.date, filterType);
                if (matches) {
                    console.log(`Association matches ${filterType}: ${assoc.emailName} <-> ${assoc.listName} (${assoc.date})`);
                }
                return matches;
            });

            console.log(`Filtered associations count: ${filteredAssociations.length}`);
            renderAssociations(filteredAssociations);

            // Also update inclusion statistics with the same filter
            const inclusionFilter = document.getElementById('inclusion-filter').value;
            filterInclusionStatistics(inclusionFilter);
        }

        // Create associations between emails and lists with matching dates and similar names
        function createAssociations() {
            associations = [];
            let unmatchedEmails = [];
            let unmatchedLists = [];

            console.log('=== Starting Association Creation ===');
            console.log(`Total Emails: ${emails.length}`);
            console.log(`Total Lists: ${lists.length}`);


            // Track which lists have been matched
            const matchedListIds = new Set();

            emails.forEach(email => {
                console.log(`\nProcessing Email: "${email.name}"`);
                console.log(`  Email Date: ${email.date}`);

                if (!email.date) {
                    unmatchedEmails.push({
                        name: email.name,
                        reason: 'No date found in email name',
                        id: email.id,
                        normalized: normalizeName(email.name)
                    });
                    console.log('  ❌ No date found in email name');
                    return;
                }

                const normalizedEmailName = normalizeName(email.name);
                console.log(`  Normalized Email Name: "${normalizedEmailName}"`);

                let emailMatched = false;
                let matchingLists = [];
                let potentialMatches = [];
                let listsWithSameDate = [];
                let listsWithDifferentDate = [];

                lists.forEach(list => {
                    if (!list.date) {
                        return; // Skip lists without dates
                    }

                    const normalizedListName = normalizeName(list.name);
                    const datesMatch = email.date === list.date;
                    const namesAreSimilar = namesMatch(email.name, list.name);

                    // Collect all lists for better debugging
                    if (datesMatch) {
                        listsWithSameDate.push({
                            name: list.name,
                            normalized: normalizedListName,
                            date: list.date
                        });
                    } else {
                        // Check if the normalized names match but dates don't
                        if (namesAreSimilar) {
                            listsWithDifferentDate.push({
                                name: list.name,
                                normalized: normalizedListName,
                                date: list.date
                            });
                        }
                    }

                    if (datesMatch) {
                        console.log(`  Checking List: "${list.name}"`);
                        console.log(`    List Date: ${list.date}`);
                        console.log(`    Normalized List Name: "${normalizedListName}"`);
                        console.log(`    Dates Match: ✓`);
                        console.log(`    Names Similar: ${namesAreSimilar ? '✓' : '✗'}`);

                        if (!namesAreSimilar) {
                            potentialMatches.push({
                                listName: list.name,
                                normalizedList: normalizedListName,
                                normalizedEmail: normalizedEmailName,
                                listDate: list.date
                            });
                            console.log(`    Name mismatch details:`);
                            console.log(`      Email (normalized): "${normalizedEmailName}"`);
                            console.log(`      List (normalized): "${normalizedListName}"`);
                        }
                    }

                    // Check if dates match AND names are similar (ignoring tier information)
                    if (datesMatch && namesAreSimilar) {
                        const association = {
                            id: `${email.id}-${list.id}`,
                            emailId: email.id,
                            emailName: email.name,
                            listId: list.id,
                            listName: list.name,
                            date: email.date
                        };
                        associations.push(association);
                        matchingLists.push(list.name);
                        matchedListIds.add(list.id);
                        emailMatched = true;
                        console.log(`    ✅ MATCH FOUND! Association created.`);
                    }
                });

                if (emailMatched) {
                    console.log(`  ✅ Email matched with ${matchingLists.length} list(s): ${matchingLists.join(', ')}`);
                } else if (email.date) {
                    let detailedReason = '';

                    if (listsWithSameDate.length > 0) {
                        detailedReason = `Found ${listsWithSameDate.length} list(s) with same date but names don't match after normalization`;
                    } else if (listsWithDifferentDate.length > 0) {
                        detailedReason = `Found ${listsWithDifferentDate.length} list(s) with matching name but different date`;
                    } else {
                        detailedReason = 'No lists found with matching date or similar name';
                    }

                    unmatchedEmails.push({
                        name: email.name,
                        date: email.date,
                        reason: detailedReason,
                        id: email.id,
                        normalized: normalizedEmailName,
                        potentialMatches: potentialMatches,
                        listsWithSameDate: listsWithSameDate,
                        listsWithDifferentDate: listsWithDifferentDate
                    });
                    console.log(`  ❌ No matching lists found for this email`);
                }
            });

            // Find unmatched lists
            lists.forEach(list => {
                if (list.date && !matchedListIds.has(list.id)) {
                    unmatchedLists.push({
                        name: list.name,
                        date: list.date,
                        reason: 'No matching email found',
                        id: list.id
                    });
                }
            });

            console.log('\n=== Association Results ===');
            console.log(`Total Associations Created: ${associations.length}`);
            console.log(`Unmatched Emails: ${unmatchedEmails.length}`);
            console.log(`Unmatched Lists: ${unmatchedLists.length}`);

            // Apply current filter before rendering
            const currentFilter = document.getElementById('association-filter').value;
            console.log(`\nApplying filter "${currentFilter}" to ${associations.length} associations`);

            // Instead of filtering here, use the filterAssociations function to ensure consistency
            filterAssociations(currentFilter);

            // Show detailed results dialog with filtered results
            const filteredAssociations = associations.filter(assoc =>
                dateMatchesFilter(assoc.date, currentFilter)
            );

            // Filter unmatched items based on current filter
            const filteredUnmatchedEmails = unmatchedEmails.filter(email =>
                !email.date || dateMatchesFilter(email.date, currentFilter)
            );

            const filteredUnmatchedLists = unmatchedLists.filter(list =>
                !list.date || dateMatchesFilter(list.date, currentFilter)
            );

            showAssociationResults(filteredAssociations, filteredUnmatchedEmails, filteredUnmatchedLists, currentFilter);

            // Update inclusion statistics when new associations are created
            if (associations.length > 0) {
                updateInclusionStatistics();
            }
        }

        // Delete an association
        function deleteAssociation(associationId) {
            associations = associations.filter(assoc => assoc.id !== associationId);
            renderAssociations(associations);
            showNotification('Association deleted', 'info');
        }

        // Update counts of emails and lists
        function updateCounts() {
            const emailCountElement = document.getElementById('email-count');
            if (emailCountElement) {
                emailCountElement.textContent = `${emails.length} Emails`;
            }
        }


        // Updated includeListsInEmails function with enhanced error handling
        async function includeListsInEmails() {
            // Get currently filtered associations or all associations
            const currentFilter = document.getElementById('association-filter').value;
            const associationsToProcess = associations.filter(assoc =>
                dateMatchesFilter(assoc.date, currentFilter)
            );

            if (associationsToProcess.length === 0) {
                if (associations.length === 0) {
                    showNotification('Please create associations first', 'error');
                } else {
                    showNotification(`No associations found for filter: ${currentFilter}`, 'error');
                }
                return;
            }

            console.log('=== Starting Include Lists in Emails ===');
            console.log(`Processing ${associationsToProcess.length} associations (filter: ${currentFilter})`);

            try {
                showNotification(`Processing ${associationsToProcess.length} email-list associations...`, 'info');
                let successCount = 0;
                let errorCount = 0;
                let needsManualCheck = [];

                // Process each association
                for (const [index, association] of associationsToProcess.entries()) {
                    const statusElement = document.getElementById(`status-${association.id}`);

                    try {
                        console.log(`\n📧 Processing Association ${index + 1}/${associationsToProcess.length}:`);
                        console.log(`  Email: "${association.emailName}" (ID: ${association.emailId})`);
                        console.log(`  List: "${association.listName}" (ID: ${association.listId})`);
                        console.log(`  Date: ${association.date}`);

                        // Show processing status
                        if (statusElement) {
                            statusElement.style.display = 'block';
                            statusElement.innerHTML = `
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 mt-3">
                                    <div class="flex items-center">
                                        <i class="fas fa-spinner fa-spin text-blue-500 mr-2"></i>
                                        <span class="text-blue-700 text-sm">Processing...</span>
                                    </div>
                                </div>
                            `;
                        }

                        // Make API call to include list in email
                        const response = await fetch('/api/include-list-in-email', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                emailId: association.emailId.toString(),
                                listId: association.listId.toString(),
                                emailName: association.emailName,
                                listName: association.listName
                            })
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.message || `HTTP error ${response.status}`);
                        }

                        // If we get a successful response, trust it worked
                        successCount++;
                        console.log(`  ✅ Successfully included list in email`);

                        // Show success status in UI
                        if (statusElement) {
                            statusElement.innerHTML = `
                                <div class="bg-green-50 border border-green-200 rounded-lg p-3 mt-3">
                                    <div class="flex items-center">
                                        <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                        <span class="text-green-700 text-sm">✅ List successfully included in email</span>
                                    </div>
                                </div>
                            `;
                        }

                        showNotification(`✅ "${association.listName}" included in "${association.emailName}"`, 'success');

                    } catch (error) {
                        errorCount++;
                        console.error(`  ❌ Error: ${error.message}`);

                        // Show error status in UI
                        if (statusElement) {
                            statusElement.innerHTML = `
                                <div class="bg-red-50 border border-red-200 rounded-lg p-3 mt-3">
                                    <div class="flex items-center">
                                        <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                                        <span class="text-red-700 text-sm">❌ Error: ${error.message}</span>
                                    </div>
                                </div>
                            `;
                        }

                        showNotification(`❌ Error with "${association.emailName}": ${error.message}`, 'error');
                    }

                    // Add a small delay between API calls to avoid rate limiting
                    await new Promise(resolve => setTimeout(resolve, 1500));
                }

                console.log('\n=== Include Lists Results ===');
                console.log(`Successful: ${successCount}`);
                console.log(`Failed: ${errorCount}`);

                if (successCount > 0 && errorCount === 0) {
                    showNotification(`✅ All ${successCount} lists have been included in their emails`, 'success');
                } else if (successCount > 0 && errorCount > 0) {
                    showNotification(`⚠️ ${successCount} succeeded, ${errorCount} failed. Check console for details.`, 'warning');
                } else if (errorCount > 0) {
                    showNotification(`❌ Failed to include lists. Check console for details.`, 'error');
                }

            } catch (error) {
                console.error('Error in includeListsInEmails:', error);
                showNotification(`Error including lists in emails: ${error.message}`, 'error');
            }
        }

        // Show notification
        function showNotification(message, type) {
            // Remove any existing notifications
            const existingNotification = document.querySelector('.notification');
            if (existingNotification) {
                existingNotification.remove();
            }

            const notification = document.createElement('div');
            notification.className = `notification fixed top-[200px] right-4 px-4 py-3 rounded-lg shadow-lg text-white font-medium z-50 ${type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' : type === 'warning' ? 'bg-amber-500' : 'bg-blue-500'
                }`;

            notification.textContent = message;

            document.body.appendChild(notification);

            // Remove notification after 3 seconds
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Show detailed association results in a dialog
        function showAssociationResults(associations, unmatchedEmails, unmatchedLists, filterType) {
            const dialog = document.createElement('div');
            dialog.className = 'fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50';

            const filterLabel = filterType === 'all' ? 'All Dates' :
                               filterType === 'today' ? 'Today' :
                               filterType === 'tomorrow' ? 'T+1 Days' :
                               filterType === 'tplus2' ? 'T+2 Days' :
                               filterType === 'tplus3' ? 'T+3 Days' :
                               filterType === 'tplus4' ? 'T+4 Days' : filterType;

            dialog.innerHTML = `
                <div class="bg-white rounded-lg shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
                    <div class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6">
                        <h2 class="text-2xl font-bold flex items-center">
                            <i class="fas fa-link mr-3"></i>
                            Association Results
                        </h2>
                        <p class="mt-2 text-purple-100">Filter: ${filterLabel}</p>
                    </div>

                    <div class="p-6 overflow-y-auto" style="max-height: calc(90vh - 200px);">
                        <!-- Summary Cards -->
                        <div class="grid grid-cols-3 gap-4 mb-6">
                            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-sm text-green-600 font-medium">Matched</p>
                                        <p class="text-2xl font-bold text-green-800">${associations.length}</p>
                                    </div>
                                    <i class="fas fa-check-circle text-3xl text-green-500"></i>
                                </div>
                            </div>

                            <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-sm text-amber-600 font-medium">Unmatched Emails</p>
                                        <p class="text-2xl font-bold text-amber-800">${unmatchedEmails.length}</p>
                                    </div>
                                    <i class="fas fa-envelope text-3xl text-amber-500"></i>
                                </div>
                            </div>

                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-sm text-blue-600 font-medium">Unmatched Lists</p>
                                        <p class="text-2xl font-bold text-blue-800">${unmatchedLists.length}</p>
                                    </div>
                                    <i class="fas fa-list text-3xl text-blue-500"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Unmatched Emails Section -->
                        ${unmatchedEmails.length > 0 ? `
                            <div class="mb-6">
                                <h3 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                                    <i class="fas fa-exclamation-triangle text-amber-500 mr-2"></i>
                                    Unmatched Emails (${unmatchedEmails.length})
                                </h3>
                                <div class="space-y-2 max-h-60 overflow-y-auto">
                                    ${unmatchedEmails.map(email => `
                                        <div class="bg-amber-50 border border-amber-200 rounded-lg p-3">
                                            <div class="flex justify-between items-start">
                                                <div class="flex-1">
                                                    <p class="font-medium text-gray-800">${email.name}</p>
                                                    <p class="text-sm text-gray-600 mt-1">
                                                        <i class="fas fa-calendar-alt mr-1"></i>
                                                        Date: ${email.date || 'No date'}
                                                    </p>

                                                    <!-- Main Reason -->
                                                    <div class="bg-red-100 border border-red-200 rounded p-2 mt-2">
                                                        <p class="text-xs text-red-800 font-semibold">
                                                            <i class="fas fa-times-circle mr-1"></i>
                                                            Reason: ${email.reason}
                                                        </p>
                                                    </div>

                                                    <!-- Normalized Name for Debugging -->
                                                    <div class="bg-white border border-gray-300 rounded p-2 mt-2">
                                                        <p class="text-xs font-semibold text-gray-700 mb-1">Email after normalization:</p>
                                                        <p class="text-xs text-purple-700 font-mono">"${email.normalized || 'N/A'}"</p>
                                                    </div>

                                                    <!-- Lists with Same Date -->
                                                    ${email.listsWithSameDate && email.listsWithSameDate.length > 0 ? `
                                                        <div class="bg-yellow-50 border border-yellow-200 rounded p-2 mt-2">
                                                            <p class="text-xs font-semibold text-yellow-800 mb-1">
                                                                <i class="fas fa-exclamation mr-1"></i>
                                                                Lists with SAME date (${email.date}) but name mismatch:
                                                            </p>
                                                            ${email.listsWithSameDate.map(list => `
                                                                <div class="ml-2 mt-1 bg-white p-1 rounded">
                                                                    <p class="text-xs text-gray-700">• Original: "${list.name}"</p>
                                                                    <p class="text-xs text-purple-700 ml-2 font-mono">Normalized: "${list.normalized}"</p>
                                                                </div>
                                                            `).join('')}
                                                            <p class="text-xs text-red-600 mt-1 font-semibold">
                                                                ⚠️ These lists have the correct date but names don't match after removing tier info
                                                            </p>
                                                        </div>
                                                    ` : ''}

                                                    <!-- Lists with Different Date -->
                                                    ${email.listsWithDifferentDate && email.listsWithDifferentDate.length > 0 ? `
                                                        <div class="bg-blue-50 border border-blue-200 rounded p-2 mt-2">
                                                            <p class="text-xs font-semibold text-blue-800 mb-1">
                                                                <i class="fas fa-calendar-times mr-1"></i>
                                                                Lists with matching name but DIFFERENT date:
                                                            </p>
                                                            ${email.listsWithDifferentDate.map(list => `
                                                                <div class="ml-2 mt-1">
                                                                    <p class="text-xs text-gray-700">• "${list.name}"</p>
                                                                    <p class="text-xs text-blue-600 ml-2">Date: ${list.date}</p>
                                                                </div>
                                                            `).join('')}
                                                        </div>
                                                    ` : ''}

                                                    <!-- No matching lists at all -->
                                                    ${(!email.listsWithSameDate || email.listsWithSameDate.length === 0) &&
                                                      (!email.listsWithDifferentDate || email.listsWithDifferentDate.length === 0) ? `
                                                        <div class="bg-gray-100 border border-gray-300 rounded p-2 mt-2">
                                                            <p class="text-xs text-gray-600">
                                                                <i class="fas fa-search mr-1"></i>
                                                                No lists found with this date or similar name pattern
                                                            </p>
                                                        </div>
                                                    ` : ''}
                                                </div>
                                                <span class="text-xs text-amber-600 bg-amber-100 px-2 py-1 rounded-full">
                                                    ID: ${email.id}
                                                </span>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}

                        <!-- Unmatched Lists Section -->
                        ${unmatchedLists.length > 0 ? `
                            <div class="mb-6">
                                <h3 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                                    <i class="fas fa-list-ul text-blue-500 mr-2"></i>
                                    Unmatched Lists (${unmatchedLists.length})
                                </h3>
                                <div class="space-y-2 max-h-60 overflow-y-auto">
                                    ${unmatchedLists.map(list => `
                                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
                                            <div class="flex justify-between items-start">
                                                <div class="flex-1">
                                                    <p class="font-medium text-gray-800">${list.name}</p>
                                                    <p class="text-sm text-gray-600 mt-1">
                                                        <i class="fas fa-calendar-alt mr-1"></i>
                                                        ${list.date || 'No date'}
                                                    </p>
                                                    <p class="text-xs text-blue-700 mt-1">
                                                        <i class="fas fa-info-circle mr-1"></i>
                                                        ${list.reason}
                                                    </p>
                                                </div>
                                                <span class="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                                                    ID: ${list.id}
                                                </span>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}

                        <!-- Successful Associations -->
                        ${associations.length > 0 ? `
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                                    <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                    Successful Associations (${associations.length})
                                </h3>
                                <div class="text-sm text-gray-600">
                                    <p>${associations.length} email${associations.length !== 1 ? 's' : ''} successfully matched with lists.</p>
                                </div>
                            </div>
                        ` : ''}
                    </div>

                    <div class="bg-gray-100 px-6 py-4 flex justify-end">
                        <button onclick="this.closest('.fixed').remove()"
                                class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors">
                            <i class="fas fa-times mr-2"></i>
                            Close
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(dialog);

            // Show notification summary
            if (associations.length > 0) {
                showNotification(`Created ${associations.length} association${associations.length > 1 ? 's' : ''}. ${unmatchedEmails.length} emails and ${unmatchedLists.length} lists remain unmatched.`, 'success');
            } else {
                showNotification(`No associations created. ${unmatchedEmails.length} emails and ${unmatchedLists.length} lists could not be matched.`, 'warning');
            }
        }

        // Initial filter setup
        setTimeout(() => {
            // Set default filter for lists
            if (document.getElementById('date-filter')) {
                document.getElementById('date-filter').value = 'all';
                filterLists('all');
            }

            // Set default filter for associations
            if (document.getElementById('association-filter')) {
                document.getElementById('association-filter').value = 'all';
            }

            // Set default filter for emails
            if (document.getElementById('email-filter')) {
                document.getElementById('email-filter').value = 'all';
            }
        }, 100);
    </script>
</body>

</html>